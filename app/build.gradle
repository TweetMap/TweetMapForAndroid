/*
 * Copyright 2015 TweetMap All Right Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "jp.co.tweetmap"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 1
        versionName "0.0.1"

        ConfigObject config = loadConfiguration()
        resValue "string", "google_maps_api_key", config.gmap_api_key
        resValue "string", "twitter_consumer_key", config.twitter_consumer_key
        resValue "string", "twitter_consumer_secret_key", config.twitter_consumer_secretkey
    }

    signingConfigs {
        debug {
            storeFile rootProject.file('./debug.keystore')
        }
    }

    buildTypes {
        debug {
            // No specific
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:design:22.2.0'
    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:support-v4:22.2.1'
    compile 'com.google.android.gms:play-services-maps:7.5.0'
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.0-rc4'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.0-rc4'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.0-rc4'
    compile 'org.twitter4j:twitter4j-core:4.0.4'

    // Unit testing dependencies
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile "org.robolectric:robolectric:3.0"
    androidTestCompile 'org.hamcrest:hamcrest-library:1.1'
}


def loadConfiguration() {
    def prop = new Properties()

    final def PROPERTY_KEYS = [
            "gmap_api_key",
            "twitter_consumer_key",
            "twitter_consumer_secretkey",
    ]

    // IDE からのビルドと、コマンドラインからのビルドで処理を分けたい場合の書き方
    // Android Studio からのビルドでは、コマンドラインオプションに -Pandroid.injected.invoked.from.ide=true が渡される
    def buildOpt = project.properties['android.injected.invoked.from.ide']
    def isIdeBuild = (buildOpt != null && buildOpt.equalsIgnoreCase("true"));

    if (isIdeBuild) {
        // ** ATTENTION! **
        //   レポジトリをcloneしたあとはプロジェクトルートディレクトリ直下に project.properties ファイルを作成してください. 
        //   project.propertiesにはTwitterとGoogle MapsのAPI Keyを下記要領に従って定義してください. 
        //   https://github.com/TweetMap/TweetMapForAndroid#setup-configurations
        File f = project.rootProject.file('project.properties')
        if (f.exists()) {
            prop.load(f.newDataInputStream())
        } else {
            println "Please create project.properties"
        }

    } else {
        // Circle CI ビルドプロセス
        def prUserName = System.getenv('CIRCLE_PR_USERNAME')

        println "CIRCLE_PR_USERNAME:" + prUserName
        println "CIRCLE_PR_REPONAME:" + System.getenv('CIRCLE_PR_REPONAME')
        println "CIRCLE_PR_NUMBER:" + System.getenv('CIRCLE_PR_NUMBER')

        if ((prUserName != null && prUserName.length > 0)) {
            ptinrln "PullRequest契機ビルドのためダミープロパティを設定する."

            // PullRequest契機でのビルドではダミー値を使用する.
            // NOTE:
            //   Unsafe fork PR builds
            //   In the event that you want these four categories of configuration to be made available, 
            //   or you need to run fork PR builds for private repositories, 
            //   you need to affirmatively enable it because of these security issues.
            //   
            //   There is a per-project flag (in Project settings > Experimental Settings > Project fork pull requests) 
            //   which will cause us to run builds of all fork pull requests without suppressing any of the sensitive information listed above.
            //   https://circleci.com/docs/fork-pr-builds#unsafe-fork-pr-builds
            PROPERTY_KEYS.each { k ->
                prop.setProperty k, ("DUMMY_" + k)
            }

        } else {
            //  CircleCIサーバで定義されている環境変数の値を設定.
            PROPERTY_KEYS.each { k ->
                String envVar = System.getenv(k)
                if (envVar != null && envVar.length() > 0) {
                    prop.setProperty k, envVar
                }
            }
        }
    }

    // 必須環境変数の不足確認
    PROPERTY_KEYS.each { k ->
        if (prop.getProperty(k) == null) {
            throw new GradleException("ビルドに必須のプロパティ " + k + " が定義されていません.\n" +
                    "IDEビルドの場合は project.propeties に必須プロパティを設定してください.\n" +
                    "サーバビルドの場合は環境変数に必須プロパティを設定してください.")
        }
    }

    println "Load configuration..."
    println "If this build is due to pull request, " +
            "Environment variable is not set correctly by the security policy."
    prop.each { p ->
        println "  " + p
    }

    return new ConfigSlurper().parse(prop)
}