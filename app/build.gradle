/*
 * Copyright 2015 TweetMap All Right Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "jp.co.tweetmap"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "0.0.1"

        ConfigObject config = loadConfiguration()
        resValue "string", "google_maps_api_key", config.gmap_api_key
        resValue "string", "twitter_consumer_key", config.twitter_consumer_key
        resValue "string", "twitter_consumer_secret_key", config.twitter_consumer_secretkey
    }

    signingConfigs {
        debug {
            storeFile rootProject.file('./debug.keystore')
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    jacoco {
        version = '0.7.5.201505241946'
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:design:23.0.1'
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.android.support:support-v4:23.0.1'
    compile 'com.google.android.gms:play-services-maps:7.8.0'
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.0-rc4'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.0-rc4'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.0-rc4'
    compile 'org.twitter4j:twitter4j-core:4.0.4'

    // Unit testing dependencies
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile "org.robolectric:robolectric:3.0"
    androidTestCompile 'org.hamcrest:hamcrest-library:1.1'
}


def loadConfiguration() {
    def prop = new Properties()

    final def REQUIRE_PROPERTIES = [
            "gmap_api_key",
            "twitter_consumer_key",
            "twitter_consumer_secretkey",
    ]

    boolean isCircleCiBuild = "true".equalsIgnoreCase(System.getenv('CIRCLECI'))

    if (isCircleCiBuild) {
        // Circle CI プルリクエストによるビルドであるかの確認.
        String prUserName = System.getenv('CIRCLE_PR_USERNAME')
        String prNumber = System.getenv('CIRCLE_PR_NUMBER')

        if ((prUserName != null && prUserName.length() > 0) ||
                (prNumber != null && prNumber.length() > 0)) {
            // PullRequest契機でのビルドプロセス.
            // このビルドでは環境変数が読み込まれないのでプロパティにダミー値を設定して対処する
            // NOTE:
            //   Unsafe fork PR builds
            //   In the event that you want these four categories of configuration to be made available, 
            //   or you need to run fork PR builds for private repositories, 
            //   you need to affirmatively enable it because of these security issues.
            //   https://circleci.com/docs/fork-pr-builds#unsafe-fork-pr-builds
            println "ビルドモード: サーバビルド(PR)"
            REQUIRE_PROPERTIES.each { k ->
                prop.setProperty k, ("DUMMY_" + k)
            }
        } else {
            // 通常のCIビルドプロセス
            //  CircleCIサーバで定義されている環境変数の値を設定.
            println "ビルドモード: サーバビルド(Normal)"
            REQUIRE_PROPERTIES.each { k ->
                String envVar = System.getenv(k)
                if (envVar != null && envVar.length() > 0) {
                    prop.setProperty k, envVar
                }
            }
        }
    } else {
        println "ビルドモード: クライアントビルド(Normal)"
        File f = project.rootProject.file('project.properties')
        if (f.exists()) {
            prop.load(f.newDataInputStream())
        } else {
            // ** ATTENTION! **
            //   レポジトリをcloneしたあとはプロジェクトルートディレクトリ直下に project.properties ファイルを作成してください. 
            //   project.propertiesにはTwitterとGoogle MapsのAPI Keyを下記要領に従って定義してください. 
            //   https://github.com/TweetMap/TweetMapForAndroid#setup-configurations
            println "project.propertiesが見つかりません.必須プロパティを設定したproject.propertiesをprojectRoot直下に作成してください."
        }
    }

    // 必須プロパティの不足確認
    REQUIRE_PROPERTIES.each { k ->
        if (prop.getProperty(k) == null) {
            throw new GradleException("ビルドに必須のプロパティ " + k + " が定義されていません.\n" +
                    "IDEビルドの場合は project.propeties に必須プロパティを設定してください.\n" +
                    "サーバビルドの場合は環境変数に必須プロパティを設定してください.")
        } else {
            println("Set Property[" + k + ":" + prop.getProperty(k) + "]")
        }
    }

    return new ConfigSlurper().parse(prop)
}

/**
 * Jacoco Coverage
 */
task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    sourceDirectories = files('src/main/java')
    executionData = files('./build/jacoco/testDebugUnitTest.exec')
    
    reports {
        xml.enabled = true
        html.enabled = true
    }

}
